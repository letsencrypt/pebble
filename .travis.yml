language: go

sudo: true
addons:
  hosts:
    - example.letsencrypt.org
    - elpmaxe.letsencrypt.org

go:
  - "1.11.x"

env:
  - GO111MODULE=on

services:
  - docker

before_install:
  # TODO(#204): Change back to cloning master once Certbot omits keyAuthorization.
  - git clone --depth=1 -b no-keyauthorization https://github.com/certbot/certbot
  - cd certbot
  - ./certbot-auto --os-packages-only -n
  - ./tools/venv.py
  - . venv/bin/activate
  - cd -

# Override the base install phase so that the project can be installed using
# `-mod=vendor` to use the vendored dependencies
install:
  # Install `golangci-lint` using their installer script
  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.15.0
  # Install `cover` and `goveralls` without `GO111MODULE` enabled so that we
  # don't download ct-woodpecker dependencies and just put the tools in our
  # gobin.
  - GO111MODULE=off go get golang.org/x/tools/cmd/cover
  - GO111MODULE=off go get github.com/mattn/goveralls
  - go install -v -mod=vendor ./...

before_script:
  - pebble &
  # Wait for pebble to come up
  - until </dev/tcp/localhost/14000 ; do sleep 0.1 ; done

script:
  - go mod download
  # Vet Go source code using the linter config (see .golang-ci.yml)
  - golangci-lint run
  # Run project unit tests (with the race detector enabled and atomic
  # coverage profile collection)
  - go test -mod=vendor -v -race -covermode=atomic -coverprofile=coverage.out ./...
  # Upload collected coverage profile to goveralls
  - goveralls -coverprofile=coverage.out -service=travis-ci
  # Perform a test issuance with chisel2.py
  - REQUESTS_CA_BUNDLE=./test/certs/pebble.minica.pem python ./test/chisel2.py example.letsencrypt.org elpmaxe.letsencrypt.org

deploy:
  - provider: script
    script: bash .travis/publish.sh
    skip_cleanup: true
    on:
      repo: letsencrypt/pebble
      tags: true
